{"version":3,"sources":["sagas/index.js","actions/actionTypes.js","reducers/index.js","store/index.js","App.js","index.js"],"names":["watcherSaga","workerSaga","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","fetchTxt","num","axios","method","url","concat","action","response","txt","_context2","console","log","number","call","sent","data","put","type","t0","error","_marked2","API_CALL_REQUEST","API_CALL_SUCCESS","API_CALL_FAILURE","initialState","fetching","sagaMiddleware","createSagaMiddleware","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","state","arguments","length","undefined","Object","objectSpread","compose","applyMiddleware","run","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","myRef","React","createRef","_this2","_this$props","onRequestTxt","react_default","createElement","className","ref","placeholder","disabled","onClick","current","value","style","color","Component","connect","dispatch","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e68ceea1.chunk.js","sourcesContent":["// import saga\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// watcher saga: watches for actions dispatched to the store, starts worker saga\nexport function* watcherSaga() {\n  yield takeLatest(\"API_CALL_REQUEST\", workerSaga);\n}\n\n// function that makes the api request and returns a Promise for response\nfunction fetchTxt(num) {\n  \n  return axios({\n    method: \"get\",\n    url: `https://numbers-api-proxy.dci-fbw121.now.sh/?number=${num}`\n  });\n}\n\n// worker saga: makes the api call when watcher saga sees the action\nfunction* workerSaga(action) {\n  console.log(action.number)\n  try {\n  \n    const response = yield call(fetchTxt,action.number);\n    console.log(response.data);\n    const txt = response.data;\n\n    // dispatch a success action to the store with the new txt\n    yield put({ type: \"API_CALL_SUCCESS\", txt });\n  } catch (error) {\n    // dispatch a failure action to the store with the error\n    yield put({ type: \"API_CALL_FAILURE\", error });\n  }\n}\n","// action types\n\nexport const API_CALL_REQUEST = \"API_CALL_REQUEST\";\nexport const API_CALL_SUCCESS = \"API_CALL_SUCCESS\";\nexport const API_CALL_FAILURE = \"API_CALL_FAILURE\";\n","// import the actions we defined\nimport { API_CALL_REQUEST, API_CALL_SUCCESS, API_CALL_FAILURE } from '../actions/actionTypes'\n\n// define an initial state\n\nconst initialState = {\n  fetching: false,\n  txt: \"Facts About Numbers\",\n  error: null,\n  num:0\n};\n\n// the reducer\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n      case API_CALL_REQUEST:\n          return { ...state, fetching: true, error: null,number:action.num};\n      case API_CALL_SUCCESS:\n          return { ...state, fetching: false, txt: action.txt};\n      case API_CALL_FAILURE:\n          return { ...state, fetching: false, txt: null, error: action.error};\n      default:\n          return state;\n  }\n}","// import Redux store methods\nimport { createStore, applyMiddleware, compose } from 'redux'\n// import Saga middleware\nimport createSagaMiddleware from 'redux-saga'\n// import watcher from saga file we created\nimport { watcherSaga } from '../sagas'\n// import the Reducer\nimport { reducer } from '../reducers'\n\n// create a Saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// dev tools middleware\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\n// create a Redux store using the Reducer and connect the Saga middleware to the Redux store + DevTools\nexport const store = createStore(\n    reducer,\n    compose(applyMiddleware(sagaMiddleware), reduxDevTools)\n);\n\n// run the watcher\nsagaMiddleware.run(watcherSaga);","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import React bindings for Redux\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  render() {\n    // Destructuring assignment from Props\n    const { fetching, txt, onRequestTxt, error } = this.props;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n  \n          <h1 className=\"App-title\">\"{this.props.txt}\"</h1>\n\n          {<p className=\"App-intro\">Insert a Number !</p>}\n          <input\n            ref={this.myRef}\n            placeholder=\"number\"\n            type=\"number\"\n          />\n          <br />\n          {fetching ? (\n            <button className=\"btn btn-warning\" disabled>\n              Fetching...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => onRequestTxt(this.myRef.current.value)}\n            >\n              Request a Fact\n            </button>\n          )}\n\n          {error && (\n            <p style={{ color: \"red\" }}>Uh oh - something went wrong!</p>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\n// Extracting Data with mapStateToProps\nconst mapStateToProps = state => {\n  return {\n    fetching: state.fetching,\n    txt: state.txt,\n    error: state.error\n  };\n};\n\n// Dispatching actions with mapDispatchToProps\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRequestTxt: num => {\n      console.log(num);\n      dispatch({ type: \"API_CALL_REQUEST\", number: num });\n    }\n  };\n};\n\n// the connect() function connects the React component to the Redux store.\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// import React bindings for Redux\nimport { Provider } from \"react-redux\";\n// import the store\nimport { store } from \"./store\"\n// import App\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}